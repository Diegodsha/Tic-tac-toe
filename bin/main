#!/usr/bin/env ruby

require_relative '../lib/board'
require_relative '../lib/game_logic'

# introduction
puts 'TIC-TAC-TOE'
puts "\nWELCOME TO THIS VERY ADDICTIVE AND FUN GAME"
puts "\nMake shure you have a friend to play with or if you're alone or got no friends it's okay...
don't cry...... JUST PLAY AND HAVE FUN!"

# player one name and select mark-----------------
puts "\nPlayer 1, enter your name :"
player_one = gets.chomp.upcase

puts 'Please choose between X or O'
mark_one = gets.chomp.upcase

until %w[X O].include?(mark_one)
  puts 'Hey! remember is either X or O'
  mark_one = gets.chomp.upcase
  if mark_one != 'X' && mark_one != 'O'
    puts "\nOk I\'ll make it easier for you, just use X :)"
    mark_one = 'X'
  end
end

# player two name and default mark
mark_two = mark_one == 'X' ? 'O' : 'X'

puts "\nPlayer two, enter your name :"
player_two = gets.chomp.upcase

puts "\n#{player_one} your mark will be #{mark_one}, #{player_two} your mark will be #{mark_two}"

# start the game with an option to reset the game
puts "\nLet's get ready to rumbleeeee!".upcase

# display_board = Board.new
#display_board.show_board

puts "\ncurrent player start the game, make your move"

# make current player move

game = TicTacToe.new(player_one, player_two,mark_one,mark_two)

move = gets.strip.to_i - 1 

game.player_moves(move)


# def move
#   puts"enter your move"
#   input = gets.strip.to_i - 1
#   @board[input] = "x"
#   display_board.show_board
# end

# move


# check if game is a tie or end
# if game end show noard and winner message
# if game tie show board and tie message

# if not change player

# option to play again
# reset the game if Y
