#!/usr/bin/env ruby

# introduction
puts 'TIC-TAC-TOE'
puts "\nWELCOME TO THIS VERY ADDICTIVE AND FUN GAME"
puts "\nMake shure you have a friend to play with or if you're alone or got no friends it's okay...
don't cry...... JUST PLAY AND HAVE FUN!"

# player one name and select mark-----------------
puts "\nPlayer 1, enter your name :"
player_one = gets.chomp.upcase

puts 'Please choose between X or O'
mark_one = gets.chomp.upcase

until %w[X O].include?(mark_one)
  puts 'Hey! remember is either X or O'
  mark_one = gets.chomp.upcase
  if mark_one != 'X' && mark_one != 'O'
    puts "\nOk I\'ll make it easier for you, just use #{%w[X O].sample} :)"
    mark_one = 'X'
  end
end

# player two name and default mark
mark_two = mark_one == 'X' ? 'O' : 'X'

puts "\nPlayer two, enter your name :"
player_two = gets.chomp.upcase

puts "\n#{player_one} your mark will be #{mark_one}, #{player_two} your mark will be #{mark_two}"

# start the game with an option to reset the game
puts "\nLet's get ready to rumbleeeee!".upcase

# game = TicTacToe.new(player_one, player_two,mark_one,mark_two)

current_player = player_one

puts "\n#{current_player} starts the game"

game_start = true

while game_start == true

  board = [1, 2, 3, 4, 5, 6, 7, 8, 9]

  puts "#{board[0]} | #{board[1]} | #{board[2]}"
  puts '-----------'
  puts "#{board[3]} | #{board[4]} | #{board[5]}"
  puts '-----------'
  puts "#{board[6]} | #{board[7]} | #{board[8]}"

  puts "#{current_player} make your move between 1..9 "

  move = gets.strip.to_i - 1
  move_repeated = false

  until move.between?(0, 9) and !move_repeated
    puts "Remember it's between 1..9"
    move = gets.strip.to_i - 1
  end

  # make current player move on board
  # game.player_moves(move)
  #--------------------------------------------------------------------------

  game_finish = [false, true] # game_finish variable for testing functionality
  tie = [true, false].sample
  if game_finish and tie
    puts "it's a tie"
    game_start = false
  elsif game_finish and !tie
    puts "the winner is #{current_player}"
    game_start = false
  end
  # check if game is a tie or end
  # if game end show noard and winner message
  # if game tie show board and tie message
  #-----------------------------------------------------------------------------

  # if not change player
  if current_player == player_one
    current_player = player_two
  elsif current_player == player_two
    current_player = player_one
  end
  #-----------------------------------------------------------------------------
  # option to play again
  # reset the game if Y
end
